{"ast":null,"code":"import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, mergeProps as _mergeProps, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  slot: \"footer\",\n  class: \"dialog-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n\n  return _openBlock(), _createBlock(_component_el_dialog, _mergeProps({\n    class: \"confirm-modal\",\n    center: \"\",\n    \"modal-append-to-body\": false,\n    \"append-to-body\": true,\n    visible: $options.isVisible,\n    onClose: $options.close,\n    \"before-close\": $options.beforeClose\n  }, _ctx.$attrs), {\n    default: _withCtx(() => [_renderSlot(_ctx.$slots, \"default\", {}, () => [_createElementVNode(\"span\", null, _toDisplayString($props.message), 1\n    /* TEXT */\n    )]), _createElementVNode(\"span\", _hoisted_1, [_createVNode(_component_el_button, {\n      id: \"save-button\",\n      type: \"success\",\n      loading: $props.loading,\n      onClick: $options.confirm\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($props.confirmLabel), 1\n      /* TEXT */\n      )]),\n      _: 1\n      /* STABLE */\n\n    }, 8\n    /* PROPS */\n    , [\"loading\", \"onClick\"]), _createVNode(_component_el_button, {\n      id: \"close-button\",\n      type: \"danger\",\n      onClick: $options.close\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($props.cancelLabel), 1\n      /* TEXT */\n      )]),\n      _: 1\n      /* STABLE */\n\n    }, 8\n    /* PROPS */\n    , [\"onClick\"])])]),\n    _: 3\n    /* FORWARDED */\n\n  }, 16\n  /* FULL_PROPS */\n  , [\"visible\", \"onClose\", \"before-close\"]);\n}","map":{"version":3,"mappings":";;EAYUA,IAAI,EAAC;EAASC,KAAK,EAAC;;;;;;;uBAX5BC,aAmBYC,oBAnBZ,cAmBY;IAnBDF,KAAK,EAAC,eAmBL;IAlBDG,MAAM,EAAN,EAkBC;IAjBA,wBAAsB,KAiBtB;IAhBA,kBAAgB,IAgBhB;IAfAC,OAAO,EAAEC,kBAeT;IAdAC,OAAK,EAAED,cAcP;IAbA,gBAAcA;EAad,CAnBZ,EAOmBE,WAPnB,GAOyB;sBACvB,MAEO,CAFPC,YAEOD,WAFP,EAEO,SAFP,EAEO,EAFP,QAEO,CADLE,oBAA0B,MAA1B,EAA0B,IAA1B,EAA0BC,iBAAjBC,cAAiB,CAA1B,EAAgB;IAAA;IAAhB,CACK,CAFP,CAEO,EACPF,oBAOK,MAPL,cAOK,CANFG,aAEYC,oBAFZ,EAEY;MAFDC,EAAE,EAAC,aAEF;MAFgBC,IAAI,EAAC,SAErB;MAFgCC,OAAO,EAAEL,cAEzC;MAFmDM,OAAK,EAASZ;IAEjE,CAFZ;wBACE,MAAkB,mCAAfM,sBAAY;MAAA;OAAG;;;;KADpB;;IAAA,yBAME,EAHHC,aAEYC,oBAFZ,EAEY;MAFDC,EAAE,EAAC,cAEF;MAFiBC,IAAI,EAAC,QAEtB;MAFgCE,OAAK,EAASZ;IAE9C,CAFZ;wBACE,MAAiB,mCAAdM,qBAAW;MAAA;OAAG;;;;KADnB;;IAAA,cAGG,CAPL,CADO,EAHgB;;;;EAAA,CAPzB;;EAAA","names":["slot","class","_createBlock","_component_el_dialog","center","visible","$options","onClose","_ctx","_renderSlot","_createElementVNode","_toDisplayString","$props","_createVNode","_component_el_button","id","type","loading","onClick"],"sourceRoot":"","sources":["F:\\xampp\\htdocs\\softcode\\softvue\\src\\layout\\base\\ConfirmModal.vue"],"sourcesContent":["<template>\r\n  <el-dialog class=\"confirm-modal\"\r\n             center\r\n             :modal-append-to-body=\"false\"\r\n             :append-to-body=\"true\"\r\n             :visible=\"isVisible\"\r\n             @close=\"close\"\r\n             :before-close=\"beforeClose\"\r\n             v-bind=\"$attrs\">\r\n    <slot>\r\n      <span>{{ message }}</span>\r\n    </slot>\r\n    <span slot=\"footer\" class=\"dialog-footer\">\r\n       <el-button id=\"save-button\" type=\"success\" :loading=\"loading\" @click.native=\"confirm\">\r\n         {{ confirmLabel }}\r\n       </el-button>\r\n      <el-button id=\"close-button\" type=\"danger\" @click.native=\"close\">\r\n        {{ cancelLabel }}\r\n      </el-button>\r\n  </span>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\nimport { Dialog } from \"element-ui\";\r\nexport default {\r\n  name: \"Confirm\",\r\n  components: {\r\n    [Dialog.name]: Dialog\r\n  },\r\n  props: {\r\n    syncViaProps: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    visible: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    message: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    cancelLabel: {\r\n      type: String,\r\n      default: \"Cancel\"\r\n    },\r\n    confirmLabel: {\r\n      type: String,\r\n      default: \"Yes\"\r\n    },\r\n    loading: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    closeOnConfirm: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      promise: undefined,\r\n      beforeConfirm: () => {},\r\n      beforeCancel: () => {},\r\n      internalVisible: false,\r\n      resolvePromise: undefined,\r\n      rejectPromise: undefined\r\n    };\r\n  },\r\n  computed: {\r\n    isVisible() {\r\n      return this.visible || this.internalVisible;\r\n    }\r\n  },\r\n  methods: {\r\n    beforeClose(done) {\r\n      done();\r\n      this.updateVisible(false);\r\n    },\r\n    async close() {\r\n      let done = () => {\r\n        this.updateVisible(false);\r\n        this.rejectPromise();\r\n      };\r\n\r\n      if (this.isVisible && this.beforeCancel) {\r\n        await this.beforeCancel(done);\r\n      }\r\n      done();\r\n    },\r\n    updateVisible(value) {\r\n      if (this.syncViaProps) {\r\n        this.$emit(\"update:visible\", value);\r\n      } else {\r\n        this.internalVisible = value;\r\n      }\r\n    },\r\n    async confirm() {\r\n      let done = () => {\r\n        this.updateVisible(false);\r\n        this.resolvePromise();\r\n      };\r\n      if (this.beforeConfirm) {\r\n        await this.beforeConfirm(done);\r\n      }\r\n      if (this.closeOnConfirm) {\r\n        done();\r\n      }\r\n    },\r\n    show() {\r\n      this.updateVisible(true);\r\n      return new Promise((resolve, reject) => {\r\n        this.resolvePromise = resolve;\r\n        this.rejectPromise = reject;\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}