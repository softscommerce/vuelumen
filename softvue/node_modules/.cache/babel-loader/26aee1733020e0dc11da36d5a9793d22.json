{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-496a1dd2\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"type\", \"value\", \"placeholder\", \"required\"];\nconst _hoisted_3 = {\n  key: 0,\n  class: \"errorMessage\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"vue_input\", [$props.divClass]])\n  }, [_createElementVNode(\"label\", {\n    class: _normalizeClass($props.labelClass)\n  }, [_createTextVNode(_toDisplayString($props.label) + \" \", 1\n  /* TEXT */\n  ), $props.star ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, \"*\")) : _createCommentVNode(\"v-if\", true)], 2\n  /* CLASS */\n  ), _createElementVNode(\"input\", {\n    class: _normalizeClass([\"field\", [$props.classValue, {\n      'errors': $props.validation\n    }]]),\n    type: $props.type,\n    value: $props.modelValue,\n    placeholder: $props.placeholder,\n    required: $props.required,\n    onInput: _cache[0] || (_cache[0] = $event => _ctx.$emit('update:modelValue', $event.target.value))\n  }, null, 42\n  /* CLASS, PROPS, HYDRATE_EVENTS */\n  , _hoisted_2), $props.validation ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, _toDisplayString($props.validation), 1\n  /* TEXT */\n  )) : _createCommentVNode(\"v-if\", true)], 2\n  /* CLASS */\n  );\n}","map":{"version":3,"mappings":";;;;;;;;;;EAMcA,KAAK,EAAC;;;uBALhBC,oBAMM,KANN,EAMM;IANDD,KAAK,mBAAC,WAAD,EAAY,CAAUE,eAAV,CAAZ;EAMJ,CANN,GACIC,oBAA0E,OAA1E,EAA0E;IAAlEH,KAAK,kBAAEE,iBAAF;EAA6D,CAA1E,qCAA8BA,gBAAQ,KAAC;EAAA;KAAYA,6BAAZD,oBAA2B,MAA3B,EAA2BG,UAA3B,EAAmB,GAAnB,uCAAvC;;EAAA,GACAD,oBAE2D,OAF3D,EAE2D;IAFpDH,KAAK,mBAAC,OAAD,EAAQ,CAAUE,iBAAV,EAAoB;MAAA,UAAYA;IAAZ,CAApB,CAAR,EAE+C;IAFQG,IAAI,EAAEH,WAEd;IAFqBI,KAAK,EAAEJ,iBAE5B;IAFyCK,WAAW,EAAEL,kBAEtD;IAD1DM,QAAQ,EAAEN,eACgD;IAA1DO,OAAK,sCAAEC,WAAK,mBAAL,EAA2BC,MAAM,CAACC,MAAP,CAAcN,KAAzC,CAAF;EAAqD,CAF3D;;EAAA,eAGiCJ,mCAAjCD,oBAAkE,MAAlE,cAAkEY,iBAAnBX,iBAAmB,CAAlE,EAAyD;EAAA;EAAzD,uCALJ;;EAAA","names":["class","_createElementBlock","$props","_createElementVNode","_hoisted_1","type","value","placeholder","required","onInput","_ctx","$event","target","_toDisplayString"],"sourceRoot":"","sources":["F:\\xampp\\htdocs\\softcode\\softvue\\src\\layout\\base\\BaseInput.vue"],"sourcesContent":["<template>\r\n    <div class=\"vue_input\" :class=\"[divClass]\">\r\n        <label :class=\"labelClass\">{{ label }} <span v-if=\"star\" >*</span></label>\r\n        <input class=\"field\" :class=\"[classValue, {'errors':validation}]\" :type=\"type\" :value=\"modelValue\" :placeholder=\"placeholder\"\r\n        :required=\"required\"\r\n        @input=\"$emit('update:modelValue', $event.target.value)\" />\r\n        <span class=\"errorMessage\" v-if=\"validation\">{{validation}}</span>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    props: {\r\n        label: {\r\n            type: String,\r\n            default: '',\r\n        },\r\n        required: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n\r\n         star: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        modelValue: {\r\n            type: [String, Number],\r\n            default: '',\r\n        },\r\n        placeholder: {\r\n            type: String,\r\n            default: '',\r\n        },\r\n        type: {\r\n            type: String,\r\n            default: '',\r\n        },\r\n        divClass: {\r\n            type: [String, Number],\r\n            default: '',\r\n        },\r\n        labelClass: {\r\n            default: '',\r\n        },\r\n        classValue: {\r\n            type: [String, Number],\r\n            default: '',\r\n        },\r\n\r\n        validation:{\r\n             type: String,\r\n            default: '',\r\n        }\r\n    },\r\n    setup() {\r\n\r\n    },\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\ninput.errors{\r\n    border: 1px solid tomato !important;\r\n     box-shadow: none !important;\r\n}\r\n.errorMessage{\r\n    color: tomato;\r\n}\r\n.vue_input {\r\n    width: 100%;\r\n    label {\r\n        margin-bottom: 8px;\r\n        display: inline-block;\r\n        color: #555;\r\n        font-size: 16px;\r\n        // text-shadow: 0 1px 1px #5b8fce;\r\n        span{\r\n            color: red;\r\n        }\r\n    }\r\n    input {\r\n        width: 100%;\r\n        height: 45px;\r\n        border: none;\r\n        outline: none;\r\n        padding: 4px 16px;\r\n        border-radius: 4px;\r\n        color: #444;\r\n        letter-spacing: 1px;\r\n        font-size: 16px;\r\n        box-shadow: -5px -5px 9px rgba(255, 255, 255, 0.45), 5px 5px 9px rgba(94, 104, 121, 0.3),-5px -5px 9px rgba(255, 255, 255, 0.45),\r\n            5px 5px 9px rgba(94, 104, 121, 0.3);\r\n        background-color: #f9f9f9;\r\n        position: relative;\r\n        &::placeholder {\r\n            color: #999;\r\n        }\r\n        &:focus{\r\n            box-shadow: none;\r\n            border: 1px solid #23c483;\r\n        }\r\n    }\r\n\r\n   input::-webkit-outer-spin-button,\r\n    input::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n    }\r\n    input[type=number] {\r\n    -moz-appearance: textfield;\r\n    }\r\n\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}