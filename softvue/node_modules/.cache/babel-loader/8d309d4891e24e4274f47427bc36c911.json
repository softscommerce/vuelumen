{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-fda8b2ea\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"wrapper flex items-center\"\n};\nconst _hoisted_2 = [\"checked\", \"value\"];\n\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"checkmark\"\n}, null, -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"label\", _hoisted_1, [_createTextVNode(_toDisplayString($props.label) + \" \", 1\n  /* TEXT */\n  ), _createElementVNode(\"input\", {\n    class: \"checkbox\",\n    type: \"checkbox\",\n    checked: $options.isChecked,\n    value: $props.value,\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.updateInput && $options.updateInput(...args))\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_2), _hoisted_3]);\n}","map":{"version":3,"mappings":";;;;;EACSA,KAAK,EAAC;;;;gEAGXC,oBAA+B,MAA/B,EAA+B;EAAzBD,KAAK,EAAC;AAAmB,CAA/B,EAAuB,IAAvB,EAAuB;AAAA;AAAvB;;;uBAHFE,oBAIQ,OAJR,cAIQ,mCAHJC,gBAAO,KACT;EAAA;GAEM,EAFNF,oBAAmG,OAAnG,EAAmG;IAA5FD,KAAK,EAAC,UAAsF;IAA3EI,IAAI,EAAC,UAAsE;IAA1DC,OAAO,EAAEC,kBAAiD;IAArCC,KAAK,EAAEJ,YAA8B;IAAtBK,QAAM,yCAAEF,qDAAF;EAAgB,CAAnG;;EAAA,aAEM,EADNG,UACM,CAJR","names":["class","_createElementVNode","_createElementBlock","$props","type","checked","$options","value","onChange","_hoisted_3"],"sourceRoot":"","sources":["F:\\xampp\\htdocs\\softcode\\softvue\\src\\layout\\base\\BaseCheckboxall.vue"],"sourcesContent":["<template>\r\n  <label class=\"wrapper flex items-center\">\r\n    {{label}}\r\n    <input class=\"checkbox\" type=\"checkbox\" :checked=\"isChecked\" :value=\"value\" @change=\"updateInput\"/>\r\n    <span class=\"checkmark\"></span>\r\n  </label>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  model: {\r\n    prop: 'modelValue',\r\n    event: 'change'\r\n  },\r\n  props: {\r\n    \"value\": { type: String },\r\n    \"modelValue\": { default: \"\" },\r\n    \"label\": { type: String, required: true},\r\n    \"trueValue\": { default: true },\r\n    \"falseValue\": { default: false }\r\n  },\r\n  computed: {\r\n    isChecked() {\r\n      if (this.modelValue instanceof Array) {\r\n        return this.modelValue.includes(this.value)\r\n      }\r\n      // Note that `true-value` and `false-value` are camelCase in the JS\r\n      return this.modelValue === this.trueValue\r\n    }\r\n  },\r\n  methods: {\r\n    updateInput(event) {\r\n      let isChecked = event.target.checked\r\n      if (this.modelValue instanceof Array) {\r\n        let newValue = [...this.modelValue]\r\n        if (isChecked) {\r\n          newValue.push(this.value)\r\n        } else {\r\n          newValue.splice(newValue.indexOf(this.value), 1)\r\n        }\r\n        this.$emit('change', newValue)\r\n      } else {\r\n        this.$emit('change', isChecked ? this.trueValue : this.falseValue)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"postcss\" scoped>\r\n/* Customize the label (the wrapper) */\r\n.wrapper {\r\n  display: block;\r\n  position: relative;\r\n  padding-left: 35px;\r\n  margin-bottom: 6px;\r\n  cursor: pointer;\r\n  font-size: 22px;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  font-size: 16px;\r\n}\r\n/* Hide the browser's default checkbox */\r\n.wrapper input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n/* Create a custom checkbox */\r\n.checkmark {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 21px;\r\n  width: 21px;\r\n  border-radius: 2px;\r\n  background-color: #eee;\r\n  border: 1px solid #ccc;\r\n}\r\n/* On mouse-over, add a grey background color */\r\n.wrapper:hover input ~ .checkmark {\r\n  background-color: #ccc;\r\n}\r\n/* When the checkbox is checked, add a blue background */\r\n.wrapper input:checked ~ .checkmark {\r\n  background-color: #1CD4A7;\r\n}\r\n/* Create the checkmark/indicator (hidden when not checked) */\r\n.checkmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n}\r\n/* Show the checkmark when checked */\r\n.wrapper input:checked ~ .checkmark:after {\r\n  display: block;\r\n}\r\n/* Style the checkmark/indicator */\r\n.wrapper .checkmark:after {\r\n  left: 7px;\r\n  top: 0px;\r\n  width: 7px;\r\n  height: 15px;\r\n  border: solid white;\r\n  border-width: 0 3px 3px 0;\r\n  -webkit-transform: rotate(45deg);\r\n  -ms-transform: rotate(45deg);\r\n  transform: rotate(45deg);\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}