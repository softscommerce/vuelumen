{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, vShow as _vShow, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-6164513a\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"autocomplete\"\n};\nconst _hoisted_2 = [\"textContent\"];\nconst _hoisted_3 = [\"textContent\"];\nconst _hoisted_4 = {\n  class: \"popover\"\n};\nconst _hoisted_5 = {\n  class: \"options\",\n  ref: \"optionsList\"\n};\nconst _hoisted_6 = [\"onClick\", \"textContent\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: \"input\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleVisible && $options.toggleVisible(...args)),\n    textContent: _toDisplayString($data.selectedItem ? $data.selectedItem[$props.filterby] : '')\n  }, null, 8\n  /* PROPS */\n  , _hoisted_2), $data.selectedItem == null ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"placeholder\",\n    textContent: _toDisplayString($props.title)\n  }, null, 8\n  /* PROPS */\n  , _hoisted_3)) : _createCommentVNode(\"v-if\", true), $data.selectedItem ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    class: \"close\",\n    onClick: _cache[1] || (_cache[1] = $event => $data.selectedItem = null)\n  }, \"x\")) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    ref: \"input\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.query = $event),\n    onKeydown: [_cache[3] || (_cache[3] = _withKeys((...args) => $options.up && $options.up(...args), [\"up\"])), _cache[4] || (_cache[4] = _withKeys((...args) => $options.down && $options.down(...args), [\"down\"])), _cache[5] || (_cache[5] = _withKeys((...args) => $options.selectItem && $options.selectItem(...args), [\"enter\"]))],\n    placeholder: \"Start Typing...\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.query]]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.matches, (match, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: _normalizeClass({\n        'selected': $data.selected == index\n      }),\n      onClick: $event => $options.itemClicked(index),\n      textContent: _toDisplayString(match[$props.filterby])\n    }, null, 10\n    /* CLASS, PROPS */\n    , _hoisted_6);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])], 512\n  /* NEED_PATCH */\n  )], 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.visible]])]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;;;EAIJA,KAAK,EAAC;;;EAUJA,KAAK,EAAC;EAAUC,GAAG,EAAC;;;;uBAd7BC,oBAwBM,KAxBN,cAwBM,CAvBJC,oBAAoG,KAApG,EAAoG;IAA/FH,KAAK,EAAC,OAAyF;IAAhFI,OAAK,yCAAEC,yDAAF,CAA2E;iBAA1DC,iBAAQC,KAA2C,aAA3C,GAAeA,mBAAaC,eAAb,CAAf,GAAoC,EAA5C;EAA0D,CAApG;;EAAA,aAuBI,EAtB2BD,sBAAY,sBAA3CL,oBAA0E,KAA1E,EAA0E;UAAA;IAArEF,KAAK,EAAC,aAA+D;iBAArBM,iBAAQE,MAAM,MAAd;EAAqB,CAA1E;;EAAA,kDAsBI,EArBqDD,oCAAzDL,oBAAiF,QAAjF,EAAiF;UAAA;IAAzEF,KAAK,EAAC,OAAmE;IAA1DI,OAAK,sCAAEG,qBAAY,IAAd;EAAqD,CAAjF,EAAuE,GAAvE,sCAqBI,kBApBJJ,oBAmBM,KAnBN,cAmBM,iBAlBJA,oBAQG,OARH,EAQG;IARIM,IAAI,EAAC,MAQT;IAPDR,GAAG,EAAC,OAOH;+DANQM,cAAKG,OAMb;IALAC,SAAO,oDAAKN,qCAAE,QAAP,mDACOA,yCAAI,UADX,mDAEQA,qDAAU,WAFlB,CAKP;IAFDO,WAAW,EAAC;EAEX,CARH;;EAAA,kBAEWL,cAgBP,EATJJ,oBAQM,KARN,cAQM,CAPJA,oBAMK,IANL,EAMK,IANL,EAMK,oBALHD,oBAIgCW,SAJhC,EAIgC,IAJhC,EAIgCC,YAJHT,gBAIG,EAJI,CAAxBU,KAAwB,EAAjBC,KAAiB,KAAZ;yBAAxBd,oBAIgC,IAJhC,EAIgC;MAH7Be,GAAG,EAAED,KAGwB;MAF7BhB,KAAK;QAAA,YAAiBO,kBAAYS;MAA7B,EAEwB;MAD7BZ,OAAK,YAAEC,qBAAYW,KAAZ,CACsB;mBAA9BV,iBAAQS,KAAK,CAACP,eAAD,CAAb;IAA8B,CAJhC;;IAAA;GAIgC,CAJhC;;EAAA,CAKG,EANL,CAOI,CARN;;EAAA,CASI,CAnBN;;EAAA,aAA6BD,gBAoBzB,CAxBN","names":["class","ref","_createElementBlock","_createElementVNode","onClick","$options","_toDisplayString","$data","$props","type","$event","onKeydown","placeholder","_Fragment","_renderList","match","index","key"],"sourceRoot":"","sources":["F:\\softvue\\src\\layout\\base\\Autocomplete.vue"],"sourcesContent":["<template>\r\n  <div class=\"autocomplete\">\r\n    <div class=\"input\" @click=\"toggleVisible\" v-text=\"selectedItem ? selectedItem[filterby] : ''\"></div>\r\n    <div class=\"placeholder\" v-if=\"selectedItem == null\" v-text=\"title\"></div>\r\n    <button class=\"close\" @click=\"selectedItem = null\" v-if=\"selectedItem\">x</button>\r\n    <div class=\"popover\" v-show=\"visible\">\r\n      <input type=\"text\"\r\n        ref=\"input\"\r\n        v-model=\"query\"\r\n        @keydown.up=\"up\"\r\n        @keydown.down=\"down\"\r\n        @keydown.enter=\"selectItem\"\r\n        placeholder=\"Start Typing...\"\r\n        \r\n        >\r\n      <div class=\"options\" ref=\"optionsList\">\r\n        <ul>\r\n          <li v-for=\"(match, index) in matches\"\r\n            :key=\"index\"\r\n            :class=\"{ 'selected': (selected == index)}\"\r\n            @click=\"itemClicked(index)\"\r\n            v-text=\"match[filterby]\"></li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    props: {\r\n      items: {\r\n        default: [],\r\n        type: Array\r\n      },\r\n      filterby: {\r\n        type: String\r\n      },\r\n      title: {\r\n        default: 'Select One...',\r\n        type: String\r\n      },\r\n      shouldReset: {\r\n        type: Boolean,\r\n        default: true\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        itemHeight: 39,\r\n        selectedItem: null,\r\n        selected: 0,\r\n        query: '',\r\n        visible: false\r\n      };\r\n    },\r\n    methods: {\r\n      toggleVisible() {\r\n        this.visible = !this.visible;\r\n\r\n        setTimeout(() => {\r\n          this.$refs.input.focus();\r\n        }, 50);\r\n      },\r\n      itemClicked(index) {\r\n        this.selected = index;\r\n        this.selectItem();\r\n      },\r\n      selectItem() {\r\n        if (!this.matches.length) {\r\n          return;\r\n        }\r\n\r\n        this.selectedItem = this.matches[this.selected];\r\n        this.visible = false;\r\n\r\n        if (this.shouldReset) {\r\n          this.query = '';\r\n          this.selected = 0;\r\n        }\r\n\r\n        this.$emit('selected', JSON.parse(JSON.stringify(this.selectedItem)));\r\n      },\r\n      up() {\r\n        if (this.selected == 0) {\r\n          return;\r\n        }\r\n\r\n        this.selected -= 1;\r\n        this.scrollToItem();\r\n      },\r\n      down() {\r\n        if (this.selected >= this.matches.length - 1) {\r\n          return;\r\n        }\r\n\r\n        this.selected += 1;\r\n        this.scrollToItem();\r\n      },\r\n      scrollToItem() {\r\n        this.$refs.optionsList.scrollTop = this.selected * this.itemHeight;\r\n      },\r\n\r\n       splitArrayIntoChunksOfLen(arr, len) {\r\n        var chunks = [], i = 0, n = arr.length;\r\n        while (i < n) {\r\n            chunks.push(arr.slice(i, i += len));\r\n        }\r\n        // console.log(chunks);\r\n        return chunks;\r\n        }\r\n    },\r\n    computed: {\r\n      matches() {\r\n        this.$emit('change', this.query);\r\n\r\n        if (this.query == '') {\r\n          return [];\r\n        }\r\n       \r\n      const totalItem = this.splitArrayIntoChunksOfLen(this.items,500);\r\n\r\n    //   console.log(totalItem[0]);\r\n      if(this.query.length < 3){\r\n         return totalItem[0].filter((item) => item[this.filterby].toLowerCase().includes(this.query.toLowerCase()))\r\n      }else{\r\n         return this.items.filter((item) => item[this.filterby].toLowerCase().includes(this.query.toLowerCase()))\r\n      }\r\n\r\n    //   totalItem.forEach(element => {\r\n    //     // console.log(totalItem[0]);\r\n    //   });\r\n\r\n\r\n       \r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n.autocomplete {\r\n    width: 100%;\r\n    position: relative;\r\n    filter:drop-shadow(0px 8px 18px rgba(0, 0, 0, 0.07));\r\n}\r\n.input {\r\n    height: 40px;\r\n    border-radius: 3px;\r\n    /* border: 2px solid lightgray; */\r\n    box-shadow: 0 0 10px #eceaea;\r\n    font-size: 18px;\r\n    padding-left: 10px;\r\n    padding-top: 9px;\r\n    cursor: text;\r\n\r\n    color: #444444;\r\n}\r\n.close {\r\n    position: absolute;\r\n    right: 7px;\r\n    top: 2px;\r\n    background: none;\r\n    border: none;\r\n    font-size: 30px;\r\n    color: lightgrey;\r\n    cursor: pointer;\r\n}\r\n.placeholder {\r\n    position: absolute;\r\n    top: 7px;\r\n    left: 11px;\r\n    font-size: 18px;\r\n    color: #d0d0d0;\r\n    pointer-events: none;\r\n}\r\n.popover {\r\n    min-height: 50px;\r\n    /* border: 2px solid lightgray; */\r\n    filter:drop-shadow(0px 8px 18px rgba(0, 0, 0, 0.07));\r\n    position: absolute;\r\n    top: 46px;\r\n    left: 0;\r\n    right: 0;\r\n    background: #fff;\r\n    border-radius: 3px;\r\n    text-align: center;\r\n}\r\n.popover input {\r\n    width: 95%;\r\n    margin-top: 5px;\r\n    height: 40px;\r\n    font-size: 16px;\r\n    border-radius: 3px;\r\n    /* border: 1px solid lightgray; */\r\n    border: none;\r\n    outline: none;\r\n    padding-left: 8px;\r\n}\r\n.options {\r\n    max-height: 150px;\r\n    overflow-y: scroll;\r\n    margin-top: 5px;\r\n}\r\n.options ul {\r\n    list-style-type: none;\r\n    text-align: left;\r\n    padding-left: 0;\r\n}\r\n.options ul li {\r\n    border-bottom: 1px solid lightgray;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n    background: #f1f1f1;\r\n}\r\n.options ul li:first-child {\r\n    border-top: 2px solid #d6d6d6;\r\n}\r\n\r\n.options ul li:not(.selected):hover {\r\n    background: #8c8c8c;\r\n    color: #fff;\r\n}\r\n.options ul li.selected {\r\n    background: #58bd4c;\r\n    color: #fff;\r\n    font-weight: 600;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}