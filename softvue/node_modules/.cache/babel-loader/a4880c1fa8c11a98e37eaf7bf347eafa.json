{"ast":null,"code":"import { Dialog } from \"element-ui\";\nexport default {\n  name: \"Confirm\",\n  components: {\n    [Dialog.name]: Dialog\n  },\n  props: {\n    syncViaProps: {\n      type: Boolean,\n      default: false\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    message: {\n      type: String,\n      default: \"\"\n    },\n    cancelLabel: {\n      type: String,\n      default: \"Cancel\"\n    },\n    confirmLabel: {\n      type: String,\n      default: \"Yes\"\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    closeOnConfirm: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      promise: undefined,\n      beforeConfirm: () => {},\n      beforeCancel: () => {},\n      internalVisible: false,\n      resolvePromise: undefined,\n      rejectPromise: undefined\n    };\n  },\n\n  computed: {\n    isVisible() {\n      return this.visible || this.internalVisible;\n    }\n\n  },\n  methods: {\n    beforeClose(done) {\n      done();\n      this.updateVisible(false);\n    },\n\n    async close() {\n      let done = () => {\n        this.updateVisible(false);\n        this.rejectPromise();\n      };\n\n      if (this.isVisible && this.beforeCancel) {\n        await this.beforeCancel(done);\n      }\n\n      done();\n    },\n\n    updateVisible(value) {\n      if (this.syncViaProps) {\n        this.$emit(\"update:visible\", value);\n      } else {\n        this.internalVisible = value;\n      }\n    },\n\n    async confirm() {\n      let done = () => {\n        this.updateVisible(false);\n        this.resolvePromise();\n      };\n\n      if (this.beforeConfirm) {\n        await this.beforeConfirm(done);\n      }\n\n      if (this.closeOnConfirm) {\n        done();\n      }\n    },\n\n    show() {\n      this.updateVisible(true);\n      return new Promise((resolve, reject) => {\n        this.resolvePromise = resolve;\n        this.rejectPromise = reject;\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAuBA,SAASA,MAAT,QAAuB,YAAvB;AACA,eAAe;EACbC,IAAI,EAAE,SADO;EAEbC,UAAU,EAAE;IACV,CAACF,MAAM,CAACC,IAAR,GAAeD;EADL,CAFC;EAKbG,KAAK,EAAE;IACLC,YAAY,EAAE;MACZC,IAAI,EAAEC,OADM;MAEZC,OAAO,EAAE;IAFG,CADT;IAKLC,OAAO,EAAE;MACPH,IAAI,EAAEC,OADC;MAEPC,OAAO,EAAE;IAFF,CALJ;IASLE,OAAO,EAAE;MACPJ,IAAI,EAAEK,MADC;MAEPH,OAAO,EAAE;IAFF,CATJ;IAaLI,WAAW,EAAE;MACXN,IAAI,EAAEK,MADK;MAEXH,OAAO,EAAE;IAFE,CAbR;IAiBLK,YAAY,EAAE;MACZP,IAAI,EAAEK,MADM;MAEZH,OAAO,EAAE;IAFG,CAjBT;IAqBLM,OAAO,EAAE;MACPR,IAAI,EAAEC,OADC;MAEPC,OAAO,EAAE;IAFF,CArBJ;IAyBLO,cAAc,EAAE;MACdT,IAAI,EAAEC,OADQ;MAEdC,OAAO,EAAE;IAFK;EAzBX,CALM;;EAmCbQ,IAAI,GAAG;IACL,OAAO;MACLC,OAAO,EAAEC,SADJ;MAELC,aAAa,EAAE,MAAM,CAAE,CAFlB;MAGLC,YAAY,EAAE,MAAM,CAAE,CAHjB;MAILC,eAAe,EAAE,KAJZ;MAKLC,cAAc,EAAEJ,SALX;MAMLK,aAAa,EAAEL;IANV,CAAP;EAQD,CA5CY;;EA6CbM,QAAQ,EAAE;IACRC,SAAS,GAAG;MACV,OAAO,KAAKhB,OAAL,IAAgB,KAAKY,eAA5B;IACF;;EAHQ,CA7CG;EAkDbK,OAAO,EAAE;IACPC,WAAW,CAACC,IAAD,EAAO;MAChBA,IAAI;MACJ,KAAKC,aAAL,CAAmB,KAAnB;IACD,CAJM;;IAKP,MAAMC,KAAN,GAAc;MACZ,IAAIF,IAAG,GAAI,MAAM;QACf,KAAKC,aAAL,CAAmB,KAAnB;QACA,KAAKN,aAAL;MACD,CAHD;;MAKA,IAAI,KAAKE,SAAL,IAAkB,KAAKL,YAA3B,EAAyC;QACvC,MAAM,KAAKA,YAAL,CAAkBQ,IAAlB,CAAN;MACF;;MACAA,IAAI;IACL,CAfM;;IAgBPC,aAAa,CAACE,KAAD,EAAQ;MACnB,IAAI,KAAK1B,YAAT,EAAuB;QACrB,KAAK2B,KAAL,CAAW,gBAAX,EAA6BD,KAA7B;MACF,CAFA,MAEO;QACL,KAAKV,eAAL,GAAuBU,KAAvB;MACF;IACD,CAtBM;;IAuBP,MAAME,OAAN,GAAgB;MACd,IAAIL,IAAG,GAAI,MAAM;QACf,KAAKC,aAAL,CAAmB,KAAnB;QACA,KAAKP,cAAL;MACD,CAHD;;MAIA,IAAI,KAAKH,aAAT,EAAwB;QACtB,MAAM,KAAKA,aAAL,CAAmBS,IAAnB,CAAN;MACF;;MACA,IAAI,KAAKb,cAAT,EAAyB;QACvBa,IAAI;MACN;IACD,CAlCM;;IAmCPM,IAAI,GAAG;MACL,KAAKL,aAAL,CAAmB,IAAnB;MACA,OAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;QACtC,KAAKf,cAAL,GAAsBc,OAAtB;QACA,KAAKb,aAAL,GAAqBc,MAArB;MACD,CAHM,CAAP;IAIF;;EAzCO;AAlDI,CAAf","names":["Dialog","name","components","props","syncViaProps","type","Boolean","default","visible","message","String","cancelLabel","confirmLabel","loading","closeOnConfirm","data","promise","undefined","beforeConfirm","beforeCancel","internalVisible","resolvePromise","rejectPromise","computed","isVisible","methods","beforeClose","done","updateVisible","close","value","$emit","confirm","show","Promise","resolve","reject"],"sourceRoot":"","sources":["F:\\xampp\\htdocs\\softcode\\softvue\\src\\layout\\base\\ConfirmModal.vue"],"sourcesContent":["<template>\r\n  <el-dialog class=\"confirm-modal\"\r\n             center\r\n             :modal-append-to-body=\"false\"\r\n             :append-to-body=\"true\"\r\n             :visible=\"isVisible\"\r\n             @close=\"close\"\r\n             :before-close=\"beforeClose\"\r\n             v-bind=\"$attrs\">\r\n    <slot>\r\n      <span>{{ message }}</span>\r\n    </slot>\r\n    <span slot=\"footer\" class=\"dialog-footer\">\r\n       <el-button id=\"save-button\" type=\"success\" :loading=\"loading\" @click.native=\"confirm\">\r\n         {{ confirmLabel }}\r\n       </el-button>\r\n      <el-button id=\"close-button\" type=\"danger\" @click.native=\"close\">\r\n        {{ cancelLabel }}\r\n      </el-button>\r\n  </span>\r\n  </el-dialog>\r\n</template>\r\n<script>\r\nimport { Dialog } from \"element-ui\";\r\nexport default {\r\n  name: \"Confirm\",\r\n  components: {\r\n    [Dialog.name]: Dialog\r\n  },\r\n  props: {\r\n    syncViaProps: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    visible: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    message: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    cancelLabel: {\r\n      type: String,\r\n      default: \"Cancel\"\r\n    },\r\n    confirmLabel: {\r\n      type: String,\r\n      default: \"Yes\"\r\n    },\r\n    loading: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    closeOnConfirm: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      promise: undefined,\r\n      beforeConfirm: () => {},\r\n      beforeCancel: () => {},\r\n      internalVisible: false,\r\n      resolvePromise: undefined,\r\n      rejectPromise: undefined\r\n    };\r\n  },\r\n  computed: {\r\n    isVisible() {\r\n      return this.visible || this.internalVisible;\r\n    }\r\n  },\r\n  methods: {\r\n    beforeClose(done) {\r\n      done();\r\n      this.updateVisible(false);\r\n    },\r\n    async close() {\r\n      let done = () => {\r\n        this.updateVisible(false);\r\n        this.rejectPromise();\r\n      };\r\n\r\n      if (this.isVisible && this.beforeCancel) {\r\n        await this.beforeCancel(done);\r\n      }\r\n      done();\r\n    },\r\n    updateVisible(value) {\r\n      if (this.syncViaProps) {\r\n        this.$emit(\"update:visible\", value);\r\n      } else {\r\n        this.internalVisible = value;\r\n      }\r\n    },\r\n    async confirm() {\r\n      let done = () => {\r\n        this.updateVisible(false);\r\n        this.resolvePromise();\r\n      };\r\n      if (this.beforeConfirm) {\r\n        await this.beforeConfirm(done);\r\n      }\r\n      if (this.closeOnConfirm) {\r\n        done();\r\n      }\r\n    },\r\n    show() {\r\n      this.updateVisible(true);\r\n      return new Promise((resolve, reject) => {\r\n        this.resolvePromise = resolve;\r\n        this.rejectPromise = reject;\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}