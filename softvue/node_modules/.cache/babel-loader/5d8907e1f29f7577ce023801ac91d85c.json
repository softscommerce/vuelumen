{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nexport default {\n  model: {\n    prop: 'modelValue',\n    event: 'change'\n  },\n  props: {\n    \"value\": {\n      type: String\n    },\n    \"modelValue\": {\n      default: \"\"\n    },\n    \"label\": {\n      type: String,\n      required: true\n    },\n    \"trueValue\": {\n      default: true\n    },\n    \"falseValue\": {\n      default: false\n    }\n  },\n  computed: {\n    isChecked() {\n      if (this.modelValue instanceof Array) {\n        return this.modelValue.includes(this.value);\n      } // Note that `true-value` and `false-value` are camelCase in the JS\n\n\n      return this.modelValue === this.trueValue;\n    }\n\n  },\n  methods: {\n    updateInput(event) {\n      let isChecked = event.target.checked;\n\n      if (this.modelValue instanceof Array) {\n        let newValue = [...this.modelValue];\n\n        if (isChecked) {\n          newValue.push(this.value);\n        } else {\n          newValue.splice(newValue.indexOf(this.value), 1);\n        }\n\n        this.$emit('change', newValue);\n      } else {\n        this.$emit('change', isChecked ? this.trueValue : this.falseValue);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":";AASA,eAAe;EACbA,KAAK,EAAE;IACLC,IAAI,EAAE,YADD;IAELC,KAAK,EAAE;EAFF,CADM;EAKbC,KAAK,EAAE;IACL,SAAS;MAAEC,IAAI,EAAEC;IAAR,CADJ;IAEL,cAAc;MAAEC,OAAO,EAAE;IAAX,CAFT;IAGL,SAAS;MAAEF,IAAI,EAAEC,MAAR;MAAgBE,QAAQ,EAAE;IAA1B,CAHJ;IAIL,aAAa;MAAED,OAAO,EAAE;IAAX,CAJR;IAKL,cAAc;MAAEA,OAAO,EAAE;IAAX;EALT,CALM;EAYbE,QAAQ,EAAE;IACRC,SAAS,GAAG;MACV,IAAI,KAAKC,UAAL,YAA2BC,KAA/B,EAAsC;QACpC,OAAO,KAAKD,UAAL,CAAgBE,QAAhB,CAAyB,KAAKC,KAA9B,CAAP;MACF,CAHU,CAIV;;;MACA,OAAO,KAAKH,UAAL,KAAoB,KAAKI,SAAhC;IACF;;EAPQ,CAZG;EAqBbC,OAAO,EAAE;IACPC,WAAW,CAACd,KAAD,EAAQ;MACjB,IAAIO,SAAQ,GAAIP,KAAK,CAACe,MAAN,CAAaC,OAA7B;;MACA,IAAI,KAAKR,UAAL,YAA2BC,KAA/B,EAAsC;QACpC,IAAIQ,QAAO,GAAI,CAAC,GAAG,KAAKT,UAAT,CAAf;;QACA,IAAID,SAAJ,EAAe;UACbU,QAAQ,CAACC,IAAT,CAAc,KAAKP,KAAnB;QACF,CAFA,MAEO;UACLM,QAAQ,CAACE,MAAT,CAAgBF,QAAQ,CAACG,OAAT,CAAiB,KAAKT,KAAtB,CAAhB,EAA8C,CAA9C;QACF;;QACA,KAAKU,KAAL,CAAW,QAAX,EAAqBJ,QAArB;MACF,CARA,MAQO;QACL,KAAKI,KAAL,CAAW,QAAX,EAAqBd,SAAQ,GAAI,KAAKK,SAAT,GAAqB,KAAKU,UAAvD;MACF;IACF;;EAdO;AArBI,CAAf","names":["model","prop","event","props","type","String","default","required","computed","isChecked","modelValue","Array","includes","value","trueValue","methods","updateInput","target","checked","newValue","push","splice","indexOf","$emit","falseValue"],"sourceRoot":"","sources":["F:\\xampp\\htdocs\\softcode\\softvue\\src\\layout\\base\\BaseCheckboxall.vue"],"sourcesContent":["<template>\r\n  <label class=\"wrapper flex items-center\">\r\n    {{label}}\r\n    <input class=\"checkbox\" type=\"checkbox\" :checked=\"isChecked\" :value=\"value\" @change=\"updateInput\"/>\r\n    <span class=\"checkmark\"></span>\r\n  </label>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  model: {\r\n    prop: 'modelValue',\r\n    event: 'change'\r\n  },\r\n  props: {\r\n    \"value\": { type: String },\r\n    \"modelValue\": { default: \"\" },\r\n    \"label\": { type: String, required: true},\r\n    \"trueValue\": { default: true },\r\n    \"falseValue\": { default: false }\r\n  },\r\n  computed: {\r\n    isChecked() {\r\n      if (this.modelValue instanceof Array) {\r\n        return this.modelValue.includes(this.value)\r\n      }\r\n      // Note that `true-value` and `false-value` are camelCase in the JS\r\n      return this.modelValue === this.trueValue\r\n    }\r\n  },\r\n  methods: {\r\n    updateInput(event) {\r\n      let isChecked = event.target.checked\r\n      if (this.modelValue instanceof Array) {\r\n        let newValue = [...this.modelValue]\r\n        if (isChecked) {\r\n          newValue.push(this.value)\r\n        } else {\r\n          newValue.splice(newValue.indexOf(this.value), 1)\r\n        }\r\n        this.$emit('change', newValue)\r\n      } else {\r\n        this.$emit('change', isChecked ? this.trueValue : this.falseValue)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"postcss\" scoped>\r\n/* Customize the label (the wrapper) */\r\n.wrapper {\r\n  display: block;\r\n  position: relative;\r\n  padding-left: 35px;\r\n  margin-bottom: 6px;\r\n  cursor: pointer;\r\n  font-size: 22px;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  font-size: 16px;\r\n}\r\n/* Hide the browser's default checkbox */\r\n.wrapper input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n/* Create a custom checkbox */\r\n.checkmark {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 21px;\r\n  width: 21px;\r\n  border-radius: 2px;\r\n  background-color: #eee;\r\n  border: 1px solid #ccc;\r\n}\r\n/* On mouse-over, add a grey background color */\r\n.wrapper:hover input ~ .checkmark {\r\n  background-color: #ccc;\r\n}\r\n/* When the checkbox is checked, add a blue background */\r\n.wrapper input:checked ~ .checkmark {\r\n  background-color: #1CD4A7;\r\n}\r\n/* Create the checkmark/indicator (hidden when not checked) */\r\n.checkmark:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  display: none;\r\n}\r\n/* Show the checkmark when checked */\r\n.wrapper input:checked ~ .checkmark:after {\r\n  display: block;\r\n}\r\n/* Style the checkmark/indicator */\r\n.wrapper .checkmark:after {\r\n  left: 7px;\r\n  top: 0px;\r\n  width: 7px;\r\n  height: 15px;\r\n  border: solid white;\r\n  border-width: 0 3px 3px 0;\r\n  -webkit-transform: rotate(45deg);\r\n  -ms-transform: rotate(45deg);\r\n  transform: rotate(45deg);\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}